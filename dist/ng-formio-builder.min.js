!function e(o,n,i){function t(s,a){if(!n[s]){if(!o[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var m=new Error("Cannot find module '"+s+"'");throw m.code="MODULE_NOT_FOUND",m}var c=n[s]={exports:{}};o[s][0].call(c.exports,function(e){var n=o[s][1][e];return t(n?n:e)},c,c.exports,e,o,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)t(i[s]);return t}({1:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormActionController",["$scope","$stateParams","$state","Formio","FormioAlerts","FormioUtils","$q",function(e,o,n,i,t,r,s){e.actionUrl="",e.actionInfo=o.actionInfo||{settingsForm:{}},e.action={data:{settings:{},condition:{}}},e.newAction={name:"",title:"Select an Action"},e.availableActions={},e.addAction=function(){e.newAction.name?n.go(e.basePath+"form.action.add",{actionName:e.newAction.name}):t.onError({message:"You must select an action to add.",element:"action-select"})},e.formio.loadActions().then(function(o){e.actions=o},t.onError.bind(t)),e.formio.availableActions().then(function(o){o[0].name||o.shift(),o.unshift(e.newAction),e.availableActions=o});var a=function(o){return e.formio.actionInfo(o).then(function(o){if(o)return e.actionInfo=_.merge(e.actionInfo,o),e.actionInfo})},l=function(o){o&&"sql"===o.name&&r.eachComponent(o.settingsForm.components,function(e){"settings[type]"===e.key&&0===JSON.parse(e.data.json).length&&t.warn('<i class="glyphicon glyphicon-exclamation-sign"></i> You do not have any SQL servers configured. You can add a SQL server in the config/default.json configuration.')}),o&&"email"===o.name&&r.eachComponent(o.settingsForm.components,function(e){"settings[transport]"===e.key&&JSON.parse(e.data.json).length<=1&&t.warn('<i class="glyphicon glyphicon-exclamation-sign"></i> You do not have any email transports configured. You need to add them in the config/default.json configuration.')}),o&&"auth"===o.name&&e.$watch("action.data.settings",function(e,n){e.hasOwnProperty("association")&&angular.element("#form-group-role").css("display","new"===e.association?"":"none"),e.hasOwnProperty("association")&&n.hasOwnProperty("association")&&e.association!==n.association&&(r.eachComponent(o.settingsForm.components,function(o){o.key&&"role"===o.key&&(o.validate=o.validate||{},o.validate.required="new"===e.association)}),e.role=e.role&&"new"===e.association||"")},!0),o&&"role"===o.name&&t.warn("<i class=\"glyphicon glyphicon-exclamation-sign\"></i> The Role Assignment Action requires a Resource Form component with the API key, 'submission', to modify existing Resource submissions.")},m=function(n){if(o.actionId){e.actionUrl=e.formio.formUrl+"/action/"+o.actionId;var t=new i(e.actionUrl);return t.loadAction().then(function(o){return e.action=_.merge(e.action,{data:o}),a(o.name)})}return e.action=_.merge(e.action,{data:n}),e.action.data.settings={},s.when(e.actionInfo)};!o.actionInfo&&o.actionName?a(o.actionName).then(function(e){m(e.defaults).then(l)}):m(e.actionInfo.defaults).then(l),e.$on("formSubmission",function(o){o.stopPropagation(),t.addAlert({type:"success",message:"Action was updated."}),n.go(e.basePath+"form.actionIndex")}),e.$on("delete",function(o){o.stopPropagation(),t.addAlert({type:"success",message:"Action was deleted."}),n.go(e.basePath+"form.actionIndex")}),e.$on("cancel",function(o){o.stopPropagation(),n.go(e.basePath+"form.actionIndex")})}])},{}],2:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormController",["$scope","$stateParams","$state","Formio","FormioHelperConfig","FormioAlerts",function(e,o,n,i,t,r){e.loading=!0,e.hideComponents=[],e.submission={data:{}},e.formId=o.formId,e.formUrl=t.appUrl+"/form",e.appUrl=t.appUrl;var s=t.tag||"common";e.formUrl+=o.formId?"/"+o.formId:"",e.form={display:"form",components:[],type:o.formType?o.formType:"form",tags:[s]},e.tags=[{text:s}],e.formio=new i(e.formUrl),e.formDisplays=[{name:"form",title:"Form"},{name:"wizard",title:"Wizard"}],o.formId?e.formLoadPromise=e.formio.loadForm().then(function(o){o.display=o.display||"form",e.form=o;var n=o.tags||[];return e.tags=n.map(function(e){return{text:e}}),o},r.onError.bind(r)):e.form.submissionAccess||i.makeStaticRequest(i.getAppUrl()+"/role?limit=1000").then(function(o){e.form.submissionAccess||angular.forEach(o,function(o){o.admin||o["default"]||(e.form.submissionAccess=[{type:"create_own",roles:[o._id]},{type:"read_own",roles:[o._id]},{type:"update_own",roles:[o._id]},{type:"delete_own",roles:[o._id]}])})}),e.titleChange=function(o){e.form.name&&e.form.name!==_.camelCase(o)||(e.form.name=_.camelCase(e.form.title)),e.$parent&&e.$parent.form&&(e.$parent.form.title=e.form.title)},e.updateFormTags=function(){e.form.tags=e.tags.map(function(e){return e.text})},e.$watch("form.display",function(o){e.$broadcast("formDisplay",o)}),e.$on("formSubmission",function(o,i){r.addAlert({type:"success",message:"New submission added!"}),i._id&&n.go(e.basePath+"form.submission.view",{subId:i._id})}),e.$on("pagination:error",function(){e.loading=!1}),e.$on("pagination:loadPage",function(){e.loading=!1}),e.$on("formUpdate",function(o,n){e.form.components=n.components}),e.$on("formError",function(e,o){r.onError(o)}),e.$on("delete",function(){var o="form"===e.form.type?"Form ":"Resource ";r.addAlert({type:"success",message:o+e.form.name+" was deleted."}),n.go(e.basePath+"home")}),e.$on("cancel",function(){n.go(e.basePath+"form.view")}),e.saveForm=function(){e.formio.saveForm(angular.copy(e.form)).then(function(i){angular.merge(e.form,i);var t=o.formId?"updated":"created";r.addAlert({type:"success",message:"Successfully "+t+" form!"}),n.go(e.basePath+"form.view",{formId:i._id})},r.onError.bind(r))}}])},{}],3:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormIndexController",["$scope","FormioHelperConfig",function(e,o){e.forms=[],e.formsUrl=o.appUrl+"/form?type=form&tags="+o.tag,e.formsPerPage=o.perPage}])},{}],4:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormSubmissionController",["$scope","$stateParams","$state","Formio","FormioAlerts","$timeout",function(e,o,n,i,t,r){e.token=i.getToken(),e.submissionId=o.subId,e.submissionUrl=e.formUrl,e.submissionUrl+=o.subId?"/submission/"+o.subId:"",e.submissionData=i.submissionData,e.submission={},e.submissionId&&(e.formio=new i(e.submissionUrl),e.loadSubmissionPromise=e.formio.loadSubmission().then(function(o){return e.submission=o,o})),e.$on("formSubmission",function(o,i){o.stopPropagation();var r="put"===i.method?"updated":"created";t.addAlert({type:"success",message:"Submission was "+r+"."}),n.go(e.basePath+"form.submissionIndex",{formId:e.formId})}),e.$on("delete",function(o){o.stopPropagation(),t.addAlert({type:"success",message:"Submission was deleted."}),n.go(e.basePath+"form.submissionIndex")}),e.$on("cancel",function(o){o.stopPropagation(),n.go(e.basePath+"form.submission.view")}),e.$on("formError",function(e,o){e.stopPropagation(),t.onError(o)}),e.$on("rowSelect",function(o,i){r(function(){n.go(e.basePath+"form.submission.view",{subId:i._id})})}),e.$on("rowView",function(o,i){n.go(e.basePath+"form.submission.view",{subId:i._id})}),e.$on("submissionView",function(o,i){n.go(e.basePath+"form.submission.view",{subId:i._id})}),e.$on("submissionEdit",function(o,i){n.go(e.basePath+"form.submission.edit",{subId:i._id})}),e.$on("submissionDelete",function(o,i){n.go(e.basePath+"form.submission.delete",{subId:i._id})})}])},{}],5:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("RoleController",["$scope","FormioHelperConfig","$http",function(e,o,n){n.get(o.appUrl+"/role?limit=1000").then(function(o){e.roles=o.data})}])},{}],6:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").directive("permissionEditor",["$q","SubmissionAccessLabels",function(e,o){var n=["create_all","read_all","update_all","delete_all","create_own","read_own","update_own","delete_own"];return{scope:{roles:"=",permissions:"=",waitFor:"="},restrict:"E",templateUrl:"formio-helper/formbuilder/permission/editor.html",link:function(i){(i.waitFor||e.when()).then(function(){var e=[];_.each(n,function(o){var n=_.find(i.permissions,{type:o});e.push(n||{type:o,roles:[]})}),i.permissions.splice.apply(i.permissions,[0,i.permissions.length].concat(e))}),i.getPermissionsToShow=function(){return i.permissions.filter(i.shouldShowPermission)},i.shouldShowPermission=function(e){return!!o[e.type]},i.getPermissionLabel=function(e){return o[e.type].label},i.getPermissionTooltip=function(e){return o[e.type].tooltip}}}}])},{}],7:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").constant("FormioHelperConfig",{appUrl:"",tag:"common",perPage:10})},{}],8:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper",["formio","ngFormBuilder","ngFormioGrid","ngFormioHelper","ngTagsInput","ui.router","bgf.paginateAnything"]).constant("SubmissionAccessLabels",{read_all:{label:"Read All Submissions",tooltip:"The Read All Submissions permission will allow a user, with one of the given Roles, to read a Submission, regardless of who owns the Submission."},update_all:{label:"Update All Submissions",tooltip:"The Update All Submissions permission will allow a user, with one of the given Roles, to update a Submission, regardless of who owns the Submission. Additionally with this permission, a user can change the owner of a Submission."},delete_all:{label:"Delete All Submissions",tooltip:"The Delete All Submissions permission will allow a user, with one of the given Roles, to delete a Submission, regardless of who owns the Submission."},create_own:{label:"Create Own Submissions",tooltip:"The Create Own Submissions permission will allow a user, with one of the given Roles, to create a Submission. Upon creating the Submission, the user will be defined as its owner."},read_own:{label:"Read Own Submissions",tooltip:"The Read Own Submissions permission will allow a user, with one of the given Roles, to read a Submission. A user can only read a Submission if they are defined as its owner."},update_own:{label:"Update Own Submissions",tooltip:"The Update Own Submissions permission will allow a user, with one of the given Roles, to update a Submission. A user can only update a Submission if they are defined as its owner."},delete_own:{label:"Delete Own Submissions",tooltip:"The Delete Own Submissions permission will allow a user, with one of the given Roles, to delete a Submission. A user can only delete a Submission if they are defined as its owner."}}).run(["$templateCache",function(e){e.put("formio-helper/formbuilder/index.html",'<a ng-if="isAdministrator || formAccess([\'create_all\'])" ui-sref="{{ basePath }}createForm({formType: \'form\'})" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span> Create Form</a>\n<span class="glyphicon glyphicon-refresh glyphicon-spin" style="font-size: 2em;" ng-if="loading"></span>\n<table class="table table-striped" style="margin-top: 20px;">\n  <tbody>\n  <tr data-ng-repeat="form in forms" ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\', \'read_all\', \'create_own\'])">\n    <td>\n      <div class="row">\n        <div class="col-sm-8">\n          <a ui-sref="{{ basePath }}form.view({formId: form._id})"><h5>{{ form.title }}</h5></a>\n        </div>\n        <div class="col-sm-4">\n          <div class="button-group pull-right" style="display:flex;">\n            <a ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\'])" ui-sref="{{ basePath }}form.view({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-pencil"></span> Enter Data\n            </a>&nbsp;\n            <a ng-if="isAdministrator || hasAccess(form.name, [\'read_all\', \'create_own\'])" ui-sref="{{ basePath }}form.submissionIndex({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-list-alt"></span> View Data\n            </a>&nbsp;\n            <a ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ui-sref="{{ basePath }}form.edit({formId: form._id})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-edit"></span> Edit Form\n            </a>&nbsp;\n            <a ng-if="isAdministrator || formAccess([\'delete_all\'])" ui-sref="{{ basePath }}form.delete({formId: form._id, formType: \'form\'})" class="btn btn-default btn-xs">\n              <span class="glyphicon glyphicon-trash"></span>\n            </a>\n          </div>\n        </div>\n      </div>\n    </td>\n  </tr>\n  </tbody>\n</table>\n<bgf-pagination\n  collection="forms"\n  url="formsUrl"\n  per-page="formsPerPage"\n  template-url="formio-helper/pager.html"\n></bgf-pagination>\n'),e.put("formio-helper/formbuilder/create.html","<h2>Create a Form</h2>\n<div ng-include=\"'formio-helper/formbuilder/edit.html'\"></div>\n"),e.put("formio-helper/formbuilder/delete.html",'<h2>Delete form {{ form.title }}</h2>\n<formio-delete src="formUrl"></formio-delete>\n'),e.put("formio-helper/formbuilder/edit.html",'<form role="form" novalidate>\n  <div id="form-group-title" class="form-group">\n    <label for="title" class="control-label">Title</label>\n    <input type="text" ng-model="form.title" ng-change="titleChange(\'{{form.title}}\')" class="form-control" id="title" placeholder="Enter the form title"/>\n  </div>\n  <div id="form-group-name" class="form-group">\n    <label for="name" class="control-label">Name</label>\n    <input type="text" ng-model="form.name" class="form-control" id="name" placeholder="Enter the form machine name"/>\n  </div>\n  <div class="row">\n    <div class="col col-sm-4">\n      <div id="form-group-path" class="form-group">\n        <label for="path" class="control-label">Path</label>\n        <input type="text" class="form-control" id="path" ng-model="form.path" placeholder="example" style="text-transform: lowercase">\n        <small>The path alias for this form.</small>\n      </div>\n    </div>\n    <div class="col col-sm-4">\n      <div id="form-group-display" class="form-group">\n        <label for="display" class="control-label">Display as</label>\n        <select class="form-control" id="display" ng-options="display.name as display.title for display in formDisplays" ng-model="form.display"></select>\n      </div>\n    </div>\n    <div class="col col-sm-4">\n      <div id="form-group-tags" class="form-group">\n        <label for="tags" class="control-label">Tags</label>\n        <tags-input ng-model="tags" on-tag-added="updateFormTags()" on-tag-removed="updateFormTags()" id="tags"></tags-input>\n      </div>\n    </div>\n  </div>\n  <input type="hidden" ng-model="form.type"/>\n  <div ng-include="\'formio-helper/formbuilder/settings.html\'"></div>\n  <form-builder form="form" src="formUrl"></form-builder>\n  <div class="form-group pull-right">\n    <a class="btn btn-default" ng-click="cancel()">Cancel</a>\n    <input type="submit" class="btn btn-primary" ng-click="saveForm()" value="{{formId ? \'Save\' : \'Create\'}} {{ capitalize(form.type)  }}" />\n  </div>\n</form>\n'),e.put("formio-helper/formbuilder/form.html",'<h2>{{form.title}}</h2>\n<ul class="nav nav-tabs">\n  <li role="presentation" ng-if="isAdministrator || hasAccess(form.name, [\'create_own\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.view\')}"><a ui-sref="{{ basePath }}form.view()">Enter Data</a></li>\n  <li role="presentation" ng-if="isAdministrator || hasAccess(form.name, [\'read_own\', \'read_all\'])" ng-class="{active:isActive(basePath + \'form.submission\')}"><a ui-sref="{{ basePath }}form.submissionIndex()">View Data</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.edit\')}"><a ui-sref="{{ basePath }}form.edit()">Edit Form</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.action\')}"><a ui-sref="{{ basePath }}form.actionIndex()">Form Actions</a></li>\n  <li role="presentation" ng-if="isAdministrator || formAccess([\'edit_all\', \'create_all\'])" ng-class="{active:isActive(basePath + \'form.permission\')}"><a ui-sref="{{ basePath }}form.permission()">Access</a></li>\n</ul>\n<div ui-view></div>\n'),e.put("formio-helper/formbuilder/settings.html","\n"),e.put("formio-helper/formbuilder/view.html",'<formio src="formUrl" submission="submission" hide-components="hideComponents"></formio>\n'),e.put("formio-helper/formbuilder/action/add.html",'<formio form="actionInfo.settingsForm" submission="action"></formio>\n'),e.put("formio-helper/formbuilder/action/delete.html",'<formio-delete resource-name="\'action\'" form-action="actionUrl"></formio-delete>'),e.put("formio-helper/formbuilder/action/edit.html",'<formio form="actionInfo.settingsForm" submission="action" form-action="actionUrl"></formio>'),e.put("formio-helper/formbuilder/action/index.html",'<br/>\n<div class="panel panel-info">\n  <div class="panel-heading">\n    <a class="pull-right" href="http://help.form.io/userguide/#actions" target="_blank">\n      <i class="glyphicon glyphicon-question-sign "></i></a>\n\n    <h3 class="panel-title">Form Actions</h3>\n  </div>\n  <div class="panel-body">\n    <table class="table table-striped">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Operations</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr data-ng-repeat="action in actions">\n        <td>\n          <span ng-if="!action._id">{{ action.title }}</span>\n          <a ng-if="action._id" ui-sref="{{ basePath }}form.action.edit({actionId: action._id})">{{ action.title }}</a>\n        </td>\n        <td>\n          <span ng-if="!action._id">none</span>\n\n          <div class="button-group" style="display:flex;" ng-if="action._id">\n            <a ui-sref="{{ basePath }}form.action.edit({actionId: action._id})" class="btn btn-default btn-xs"><span\n              class="glyphicon glyphicon-edit"></span></a>&nbsp;\n            <a ui-sref="{{ basePath }}form.action.delete({actionId: action._id})" class="btn btn-danger btn-xs"><span\n              class="glyphicon glyphicon-remove-circle"></span></a>\n          </div>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n  <div class="panel-footer">\n    <form class="form-inline">\n      <div class="form-group">\n        <select id="action-select" name="action-select" ng-model="newAction" class="form-control"\n                ng-options="action as action.title for action in availableActions"></select>\n      </div>\n      <a ng-click="addAction()" class="btn btn-primary"><span class="glyphicon glyphicon-plus"></span> Add Action</a>\n    </form>\n  </div>\n</div>\n'),e.put("formio-helper/formbuilder/action/item.html",'<br/><ul class="nav nav-tabs action-nav">\n    <li role="presentation" ng-class="{active:isActive(basePath + \'form.action.edit\')}"><a ui-sref="{{ basePath }}form.action.edit()">Edit</a></li>\n    <li role="presentation" ng-class="{active:isActive(basePath + \'form.action.delete\')}"><a ui-sref="{{ basePath }}form.action.delete()">Delete</a></li>\n</ul>\n<div ui-view></div>\n'),e.put("formio-helper/formbuilder/action/view.html","TO-DO: Add actions view."),e.put("formio-helper/formbuilder/permission/editor.html",'<div ng-if="roles">\n  <table class="table table-striped">\n    <tbody>\n    <tr>\n      <th>Permission</th>\n      <th>Roles</th>\n    </tr>\n    <tr ng-repeat="permission in getPermissionsToShow()">\n      <td class="col-xs-3">\n        <label for="{{permission.type}}_role" form-builder-tooltip="{{getPermissionTooltip(permission)}}">{{getPermissionLabel(permission)}}</label>\n      </td>\n      <td class="col-xs-9">\n        <ui-select multiple ng-model="permission.roles" theme="bootstrap" reset-search-input="true" name="{{permission.type}}_role" id="{{permission.type}}_role">\n          <ui-select-match placeholder="Select roles...">{{$item.title}}</ui-select-match>\n          <ui-select-choices repeat="role._id as role in roles | filter: $select.search">\n          <div>{{ role.title }}</div>\n          </ui-select-choices>\n        </ui-select>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n'),e.put("formio-helper/formbuilder/permission/index.html",'<br/>\n<div class="panel panel-info">\n  <div class="panel-heading">\n    <h3 class="panel-title">User Permissions\n      <a class="pull-right" href="http://help.form.io/userguide/#permissions" target="_blank">\n        <i class="glyphicon glyphicon-question-sign "></i>\n      </a>\n    </h3>\n  </div>\n  <div class="panel-body">\n    <div class="well">\n      User Permissions allow you to control who can create, view, and modify form submissions. Here you may assign Project Roles to permissions. <strong>Roles</strong> can be created and edited in the <strong>config/default.json</strong> file.</a>.\n    </div>\n    <div ng-if="form._id">\n      <permission-editor permissions="form.submissionAccess" roles="roles" wait-for="loadFormPromise"></permission-editor>\n    </div>\n    <div class="form-group pull-right">\n      <a class="btn btn-default" ng-click="back()">Cancel</a>\n      <input type="submit" class="btn btn-primary" ng-click="saveForm()" value="Save Changes" />\n    </div>\n  </div>\n</div>\n'),e.put("formio-helper/formbuilder/submission/delete.html",'<formio-delete src="submissionUrl"></formio-delete>\n'),e.put("formio-helper/formbuilder/submission/edit.html",'<formio src="submissionUrl"></formio>\n'),e.put("formio-helper/formbuilder/submission/index.html",'<div class="well submissions-header">\n  <a class="btn btn-default" href="{{ formio.formUrl }}/export?format=json&x-jwt-token={{ token }}">Export JSON</a>\n  <a class="btn btn-default" href="{{ formio.formUrl }}/export?format=csv&x-jwt-token={{ token }}">Export CSV</a>\n</div>\n<div class="well" ng-if="isAdministrator">\n  To control which fields show up in this table, use the "Table View" setting on each field under "Edit Form".\n</div>\n<formio-grid src="formUrl"></formio-grid>\n'),e.put("formio-helper/formbuilder/submission/item.html",'<ul class="nav nav-pills submission-nav" style="margin-top:20px;">\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.view\')}"><a ui-sref="{{ basePath }}form.submission.view()">View Submission</a></li>\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.edit\')}"><a ui-sref="{{ basePath }}form.submission.edit()">Edit Submission</a></li>\n  <li role="presentation" ng-class="{active:isActive(basePath + \'form.submission.delete\')}"><a ui-sref="{{ basePath }}form.submission.delete()">Delete Submission</a></li>\n</ul>\n<div ui-view style="margin-top: 20px;"></div>\n'),e.put("formio-helper/formbuilder/submission/view.html",'<formio-submission form="form" submission="submission" read-only="true"></formio-submission>\n')}]),e("./controllers/FormActionController.js"),e("./controllers/FormController.js"),e("./controllers/FormIndexController.js"),e("./controllers/FormSubmissionController.js"),e("./controllers/RoleController.js"),e("./directives/permissionEditor.js"),e("./factories/FormioHelperConfig.js"),e("./providers/FormioFormBuilder.js")},{"./controllers/FormActionController.js":1,"./controllers/FormController.js":2,"./controllers/FormIndexController.js":3,"./controllers/FormSubmissionController.js":4,"./controllers/RoleController.js":5,"./directives/permissionEditor.js":6,"./factories/FormioHelperConfig.js":7,"./providers/FormioFormBuilder.js":9}],9:[function(e,o,n){"use strict";angular.module("ngFormBuilderHelper").provider("FormioFormBuilder",["$stateProvider","FormioHelperConfig",function(e,o){return{register:function(n,i,t){t=t||{};var r=t.templates?t.templates:{},s=t.controllers?t.controllers:{},a=t.base?t.base:"";a||(a=n?n+".":""),o.appUrl=i,o.tag=t.tag||"common",o.perPage=t.perPage||10;var l=function(e){return function(o,n,i){o.basePath=a,o.statePath=e,i&&n(i,{$scope:o});var t=_.get(s,e);t&&n(t,{$scope:o})}};e.state(a+"formIndex",{url:"/forms",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.index","formio-helper/formbuilder/index.html"),controller:["$scope","$controller","FormIndexController",l("form.index")]}).state(a+"createForm",{url:"/create/:formType",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.create","formio-helper/formbuilder/create.html"),controller:["$scope","$controller","FormController",l("form.create")]}).state(a+"form",{"abstract":!0,url:"/form/:formId",ncyBreadcrumb:_.get(t,"breadcrumb.form",{skip:!0}),templateUrl:_.get(r,"form.abstract","formio-helper/formbuilder/form.html"),controller:["$scope","$controller","FormController",l("form.abstract")]}).state(a+"form.view",{url:"/",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.view","formio-helper/formbuilder/view.html"),controller:["$scope","$controller",l("form.view")]}).state(a+"form.edit",{url:"/edit",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.edit","formio-helper/formbuilder/edit.html"),controller:["$scope","$controller","FormController",l("form.edit")]}).state(a+"form.delete",{url:"/delete",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"form.delete","formio-helper/formbuilder/delete.html"),controller:["$scope","$controller",l("form.delete")]});var m={};m[a+"form.submission"]={name:"submission",id:"subId",controller:["$scope","$controller","FormSubmissionController",l("submission.index")]},m[a+"form.action"]={name:"action",id:"actionId",controller:["$scope","$controller","FormActionController",l("action.index")]},angular.forEach(m,function(o,n){e.state(n+"Index",{url:"/"+o.name,ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,o.name+".index","formio-helper/formbuilder/"+o.name+"/index.html"),controller:o.controller}).state(n,{"abstract":!0,ncyBreadcrumb:_.get(t,"breadcrumb."+o.name,{skip:!0}),url:"/"+o.name+"/:"+o.id,controller:o.controller,templateUrl:_.get(r,o.name+".abstract","formio-helper/formbuilder/"+o.name+"/item.html")}).state(n+".view",{url:"",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,o.name+".view","formio-helper/formbuilder/"+o.name+"/view.html"),controller:["$scope","$controller",l(o.name+".view")]}).state(n+".edit",{url:"/edit",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,o.name+".edit","formio-helper/formbuilder/"+o.name+"/edit.html"),controller:["$scope","$controller",l(o.name+".edit")]}).state(n+".delete",{url:"/delete",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,o.name+".delete","formio-helper/formbuilder/"+o.name+"/delete.html"),controller:["$scope","$controller",l(o.name+".delete")]})}),e.state(a+"form.action.add",{url:"/add/:actionName",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"action.add","formio-helper/formbuilder/action/add.html"),controller:["$scope","$controller","FormActionController",l("action.add")],params:{actionInfo:null}}),e.state(a+"form.permission",{url:"/permission",ncyBreadcrumb:{skip:!0},templateUrl:_.get(r,"permission.index","formio-helper/formbuilder/permission/index.html"),controller:["$scope","$controller","RoleController",l("permission.index")]})},$get:function(){return{}}}}])},{}]},{},[8]);